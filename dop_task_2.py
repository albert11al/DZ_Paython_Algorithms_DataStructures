#Учитывая заголовок односвязного списка, вернуть средний узел связанного списка.
#Если есть два средних узла, вернуть второй средний узел.

#Ввод: голова = [1,2,3,4,5]
#Выход: [3,4,5]
#Объяснение: Средний узел списка — это узел 3.
a = [1,2,3,4,5]
print(a)
y = len(a) // 2
x = a[y:]
print(x)

#Ввод: голова = [1,2,3,4,5,6]
#Выход: [4,5,6]
#Объяснение: Поскольку в списке есть два средних узла со значениями 3 и 4, мы возвращаем второй.

b = [1,2,3,4,5,6]
print(b)
y = len(b) // 2
x = b[y:]
print(x)

# fast движется через один элемент
# slow движется последовательно
# например:[1,2,3,4,5] 1->3->5 fast движется столько пока следуюшая по очереди сылка не будет ноль
# таким образом fast сделал два движения и slow сделает два движения 1->2->3 и остановится.
# Элемент на котором остановился slow есть середина т.е.3
# например: [1,2,3,4,5,6] движение fast 1->3->5->Null, fast продолжит движения т.к. после 5 сылка не Null а 6, и затем после 6 Null  fast остановится
                        # движение slow 1->2->3->4 и элемент на котором остановился slow есть середина т.е4
#fast и slow делают одинаково количество движений
class Solution(object):
    def middleNode(self, head):
        fast = slow = head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        return slow
